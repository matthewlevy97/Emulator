#include <components/display.h>
#include <components/memory.h>
#include <components/timer.h>
#include <components/input.h>

#include <emulator.h>

#include "cpu.h"

unsigned const char chip8_ROM[] = {
    0x13, 0x0c, 0x60, 0x00, 0xe0, 0xa1, 0x12, 0x04, 0x70, 0x01, 0x40, 0x10,
  0x00, 0xee, 0x12, 0x04, 0x65, 0x00, 0xa2, 0x22, 0xf1, 0x55, 0xa2, 0x82,
  0xf1, 0x55, 0x12, 0x22, 0x43, 0x01, 0xd0, 0x12, 0x22, 0x02, 0x00, 0x00,
  0xf5, 0x1e, 0xf5, 0x1e, 0xf5, 0x1e, 0xf5, 0x1e, 0xf1, 0x65, 0x63, 0x00,
  0xf3, 0x15, 0xf4, 0x07, 0x34, 0x00, 0x12, 0x44, 0xa4, 0x23, 0xd0, 0x12,
  0x64, 0x0a, 0xf4, 0x15, 0x64, 0x01, 0x83, 0x43, 0x64, 0x0e, 0xe4, 0x9e,
  0x12, 0x52, 0x45, 0x00, 0x12, 0x52, 0x75, 0xff, 0x12, 0x1c, 0x64, 0x0f,
  0xe4, 0x9e, 0x12, 0x60, 0x95, 0x20, 0x12, 0x60, 0x75, 0x01, 0x12, 0x1c,
  0x86, 0x50, 0x64, 0x0a, 0xe4, 0xa1, 0x12, 0x80, 0x64, 0x00, 0x72, 0x01,
  0x74, 0x01, 0xe4, 0x9e, 0x12, 0x78, 0x86, 0x40, 0x76, 0xff, 0x12, 0x80,
  0x54, 0x20, 0x12, 0x6c, 0x72, 0xff, 0x12, 0x32, 0x22, 0x02, 0x00, 0x00,
  0xf6, 0x1e, 0xf6, 0x1e, 0xf6, 0x1e, 0xf6, 0x1e, 0x64, 0x02, 0xf4, 0x1e,
  0xf1, 0x65, 0x64, 0x10, 0x80, 0x41, 0xa2, 0x9a, 0xf1, 0x55, 0x00, 0x00,
  0xfc, 0x65, 0x23, 0x02, 0x41, 0x00, 0x00, 0xee, 0x80, 0x10, 0x23, 0x02,
  0x42, 0x00, 0x00, 0xee, 0x80, 0x20, 0x23, 0x02, 0x43, 0x00, 0x00, 0xee,
  0x80, 0x30, 0x23, 0x02, 0x44, 0x00, 0x00, 0xee, 0x80, 0x40, 0x23, 0x02,
  0x45, 0x00, 0x00, 0xee, 0x80, 0x50, 0x23, 0x02, 0x46, 0x00, 0x00, 0xee,
  0x80, 0x60, 0x23, 0x02, 0x47, 0x00, 0x00, 0xee, 0x80, 0x70, 0x23, 0x02,
  0x48, 0x00, 0x00, 0xee, 0x80, 0x80, 0x23, 0x02, 0x49, 0x00, 0x00, 0xee,
  0x80, 0x90, 0x23, 0x02, 0x4a, 0x00, 0x00, 0xee, 0x80, 0xa0, 0x23, 0x02,
  0x4b, 0x00, 0x00, 0xee, 0x80, 0xb0, 0x23, 0x02, 0x4c, 0x00, 0x00, 0xee,
  0x80, 0xc0, 0x23, 0x02, 0x00, 0xee, 0xa4, 0x27, 0xf0, 0x1e, 0xdd, 0xe4,
  0x7d, 0x04, 0x00, 0xee, 0x00, 0xe0, 0xa1, 0xff, 0xf0, 0x65, 0x40, 0x01,
  0x13, 0x54, 0x40, 0x02, 0x13, 0x58, 0x40, 0x03, 0x13, 0xbe, 0x6d, 0x0a,
  0x6e, 0x02, 0xa4, 0xd3, 0x22, 0x9c, 0x6d, 0x08, 0x6e, 0x0a, 0xa4, 0xdf,
  0x22, 0x9c, 0x6d, 0x08, 0x6e, 0x0f, 0xa4, 0xeb, 0x22, 0x9c, 0x6d, 0x08,
  0x6e, 0x14, 0xa4, 0xf5, 0x22, 0x9c, 0x6a, 0x32, 0x6b, 0x1b, 0xa5, 0x89,
  0xda, 0xb4, 0x6a, 0x3a, 0xa5, 0x8d, 0xda, 0xb4, 0x60, 0xa4, 0x61, 0xc7,
  0x62, 0x02, 0x12, 0x10, 0x61, 0x9e, 0x13, 0x5a, 0x61, 0xa1, 0x60, 0xee,
  0xa3, 0x9e, 0xf1, 0x55, 0x00, 0xe0, 0xa5, 0x33, 0xff, 0x65, 0xa4, 0x12,
  0xff, 0x55, 0x6d, 0x12, 0x6e, 0x03, 0xa5, 0x43, 0x22, 0x9c, 0x6d, 0x12,
  0x6e, 0x0a, 0xa5, 0x4b, 0x22, 0x9c, 0x6d, 0x12, 0x6e, 0x11, 0xa5, 0x53,
  0x22, 0x9c, 0x6d, 0x12, 0x6e, 0x18, 0xa5, 0x5b, 0x22, 0x9c, 0x6e, 0x00,
  0x23, 0x96, 0x7e, 0x01, 0x4e, 0x10, 0x6e, 0x00, 0x13, 0x8c, 0xa4, 0x12,
  0xfe, 0x1e, 0xf0, 0x65, 0x62, 0x01, 0xee, 0xa1, 0x62, 0x00, 0x90, 0x20,
  0x13, 0xbc, 0x80, 0xe0, 0x80, 0x0e, 0xa5, 0x63, 0xf0, 0x1e, 0xf1, 0x65,
  0xa5, 0x83, 0xd0, 0x16, 0xa4, 0x12, 0xfe, 0x1e, 0x80, 0x20, 0xf0, 0x55,
  0x00, 0xee, 0x00, 0xe0, 0x6d, 0x06, 0x6e, 0x0d, 0xa5, 0x03, 0x22, 0x9c,
  0x60, 0x03, 0xf0, 0x15, 0xf0, 0x0a, 0xf1, 0x07, 0x31, 0x00, 0x13, 0xf2,
  0xe0, 0xa1, 0x13, 0xf8, 0x00, 0xe0, 0xa4, 0x25, 0x60, 0x1e, 0x61, 0x09,
  0xd0, 0x13, 0x6d, 0x10, 0x6e, 0x11, 0xa5, 0x11, 0x22, 0x9c, 0x22, 0x02,
  0xf0, 0x0a, 0x22, 0x02, 0x13, 0x0c, 0x6d, 0x0a, 0xa5, 0x1a, 0x13, 0xfc,
  0x6d, 0x08, 0xa5, 0x26, 0x00, 0xe0, 0x6e, 0x11, 0x22, 0x9c, 0xa4, 0x28,
  0x60, 0x1e, 0x61, 0x09, 0xd0, 0x13, 0x22, 0x02, 0xf0, 0x0a, 0x22, 0x02,
  0x13, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xa0, 0xc0, 0x80,
  0xa0, 0x40, 0xa0, 0xe0, 0xa0, 0xa0, 0xe0, 0xc0, 0x40, 0x40, 0xe0, 0xe0,
  0x20, 0xc0, 0xe0, 0xe0, 0x60, 0x20, 0xe0, 0xa0, 0xe0, 0x20, 0x20, 0xe0,
  0xc0, 0x20, 0xc0, 0xe0, 0x80, 0xe0, 0xe0, 0xe0, 0x20, 0x20, 0x20, 0xe0,
  0xe0, 0xa0, 0xe0, 0xe0, 0xe0, 0x20, 0xe0, 0x40, 0xa0, 0xe0, 0xa0, 0xc0,
  0xe0, 0xa0, 0xe0, 0xe0, 0x80, 0x80, 0xe0, 0xc0, 0xa0, 0xa0, 0xc0, 0xe0,
  0xc0, 0x80, 0xe0, 0xe0, 0x80, 0xc0, 0x80, 0x60, 0x80, 0xa0, 0x60, 0xa0,
  0xe0, 0xa0, 0xa0, 0xe0, 0x40, 0x40, 0xe0, 0x60, 0x20, 0x20, 0xc0, 0xa0,
  0xc0, 0xa0, 0xa0, 0x80, 0x80, 0x80, 0xe0, 0xe0, 0xe0, 0xa0, 0xa0, 0xc0,
  0xa0, 0xa0, 0xa0, 0xe0, 0xa0, 0xa0, 0xe0, 0xc0, 0xa0, 0xc0, 0x80, 0x40,
  0xa0, 0xe0, 0x60, 0xc0, 0xa0, 0xc0, 0xa0, 0x60, 0xc0, 0x20, 0xc0, 0xe0,
  0x40, 0x40, 0x40, 0xa0, 0xa0, 0xa0, 0x60, 0xa0, 0xa0, 0xa0, 0x40, 0xa0,
  0xa0, 0xe0, 0xe0, 0xa0, 0x40, 0xa0, 0xa0, 0xa0, 0xa0, 0x40, 0x40, 0xe0,
  0x60, 0x80, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x04, 0x0b, 0x03, 0x54, 0x04, 0x10, 0x03, 0x58, 0x04,
  0x15, 0x03, 0xbe, 0x68, 0x4c, 0x34, 0x54, 0x94, 0x64, 0x68, 0x34, 0x64,
  0x38, 0x3c, 0x00, 0x08, 0x94, 0x3c, 0x88, 0x28, 0x3c, 0x94, 0x38, 0x64,
  0x84, 0x60, 0x00, 0x0c, 0x94, 0x3c, 0x88, 0x2c, 0x08, 0x94, 0x7c, 0x68,
  0x00, 0x10, 0x94, 0x40, 0x88, 0x04, 0x2c, 0x94, 0x44, 0x3c, 0x78, 0x54,
  0x3c, 0x8c, 0x00, 0x68, 0x70, 0x3c, 0x74, 0x74, 0x94, 0x2c, 0x60, 0x8c,
  0x94, 0x54, 0x3c, 0x8c, 0x00, 0x2c, 0x58, 0x58, 0x94, 0x44, 0x64, 0x64,
  0x38, 0x00, 0x60, 0x64, 0x78, 0x94, 0x48, 0x2c, 0x58, 0x78, 0x4c, 0x60,
  0x44, 0x00, 0x60, 0x64, 0x78, 0x94, 0x70, 0x3c, 0x58, 0x3c, 0x2c, 0x74,
  0x3c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x94, 0x0c, 0x94, 0x10,
  0x94, 0x34, 0x00, 0x14, 0x94, 0x18, 0x94, 0x1c, 0x94, 0x38, 0x00, 0x20,
  0x94, 0x24, 0x94, 0x28, 0x94, 0x3c, 0x00, 0x2c, 0x94, 0x04, 0x94, 0x30,
  0x94, 0x40, 0x00, 0x18, 0x17, 0x10, 0x02, 0x18, 0x02, 0x20, 0x02, 0x10,
  0x09, 0x18, 0x09, 0x20, 0x09, 0x10, 0x10, 0x18, 0x10, 0x20, 0x10, 0x10,
  0x17, 0x20, 0x17, 0x28, 0x02, 0x28, 0x09, 0x28, 0x10, 0x28, 0x17, 0xfe,
  0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x0a, 0xae, 0xa2, 0x42, 0x38, 0x08, 0x30,
  0xb8};

static const std::uint8_t fontset[] =
    {
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

emulator::component::System* CreateSystem()
{
    auto interpreter = new emulator::component::Memory<emulator::component::MemoryType::ReadOnly>(0, 0x200);
    auto memory = new emulator::component::Memory<emulator::component::MemoryType::ReadWrite>(0x200, 0xE00);

    memory->LoadData((const char*)chip8_ROM, sizeof(chip8_ROM));
    interpreter->LoadData((const char*)fontset, sizeof(fontset), emulator::chip8::CPU::kFontSetBaseAddress);

    auto input = new emulator::component::Input();
    auto cpu = new emulator::chip8::CPU();

    /*
    1 2 3 C          1 2 3 4
    4 5 6 D   ---\   Q W E R
    7 8 9 E   ---/   A S D F
    A 0 B F          Z X C V
     */
    constexpr static std::uint8_t kKeycodes[] = {
        0x31, 0x32, 0x33, 0x34,
        0x71, 0x77, 0x65, 0x72,
        0x61, 0x73, 0x64, 0x66,
        0x7A, 0x78, 0x63, 0x76,
    };
    for (int i = 0; i < sizeof(kKeycodes); i++) {
        input->RegisterKey(kKeycodes[i]);
    }
    cpu->LoadKeymap(kKeycodes);

    auto system = new emulator::component::System(
        "Chip8",
        60 * 8, // Bus/CPU tick speed, 60Hz * 8
        {
            {"Display", new emulator::component::Display(64, 32)},
            {"CPU", cpu},
            {"Memory", memory},
            {"Interpreter", interpreter},
            {"Delay", new emulator::component::Timer("Delay", 8)}, // Bus/CPU tick speed, 60Hz * 8
            {"Sound", new emulator::component::Timer("Sound", 8)}, // Bus/CPU tick speed, 60Hz * 8
            {"Input", input},
        });
    return system;
}
